# Docker Compose for the-project development environment
version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: theproject_postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_MULTIPLE_DATABASES=theproject_dev,routing_engine_dev,api_dev
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/database/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - theproject_network

  redis:
    image: redis:7-alpine
    container_name: theproject_redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - theproject_network

  # Application Services
  api:
    build:
      context: .
      dockerfile: packages/api/Dockerfile
    container_name: theproject_api
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/api_dev
      - REDIS_URL=redis://redis:6379
      - PORT=3001
    ports:
      - '3001:3001'
    volumes:
      - /var/log/api:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/health']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - theproject_network
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  routing-engine:
    build:
      context: .
      dockerfile: packages/routing-engine/Dockerfile
    container_name: theproject_routing_engine
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/routing_engine_dev
      - REDIS_URL=redis://redis:6379
      - PORT=3002
    ports:
      - '3002:3002'
    volumes:
      - /var/log/routing-engine:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3002/health']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - theproject_network
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  frontend:
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile
    container_name: theproject_frontend
    environment:
      - VITE_API_URL=http://localhost:3001
      - VITE_ROUTING_ENGINE_URL=http://localhost:3002
    ports:
      - '3000:80'
    depends_on:
      - api
      - routing-engine
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/health']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - theproject_network

  # Development Tools (Optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: theproject_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - '8081:8081'
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - dev-tools
    networks:
      - theproject_network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: theproject_pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@theproject.local
      - PGADMIN_DEFAULT_PASSWORD=password
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - '8080:80'
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - dev-tools
    networks:
      - theproject_network

  # Monitoring exporters (only run with monitoring profile)
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: theproject_postgres_exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:password@postgres:5432/postgres?sslmode=disable
    ports:
      - '9187:9187'
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - theproject_network

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: theproject_redis_exporter
    environment:
      - REDIS_ADDR=redis://redis:6379
    ports:
      - '9121:9121'
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - theproject_network

volumes:
  postgres_data:
  redis_data:

networks:
  theproject_network:
    driver: bridge
